//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ITLA_PE_MVC.DATA
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Generic> Generic { get; set; }
        public virtual DbSet<GenericType> GenericType { get; set; }
        public virtual DbSet<ProyectoEspecial> ProyectoEspecial { get; set; }
        public virtual DbSet<ProyectoEspecialMateriaGrupo> ProyectoEspecialMateriaGrupo { get; set; }
        public virtual DbSet<Solicitud> Solicitud { get; set; }
        public virtual DbSet<SolicitudAnexo> SolicitudAnexo { get; set; }
        public virtual DbSet<Logs> Logs { get; set; }
        public virtual DbSet<LoginSession> LoginSession { get; set; }
        public virtual DbSet<Settings> Settings { get; set; }
        public virtual DbSet<SystemAttribute> SystemAttribute { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserAction> UserAction { get; set; }
        public virtual DbSet<UserLog> UserLog { get; set; }
        public virtual DbSet<UsertTypeSystemAttribute> UsertTypeSystemAttribute { get; set; }
        public virtual DbSet<UserType> UserType { get; set; }
    
        public virtual ObjectResult<GetMateriasDisponibles_Result> GetMateriasDisponibles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMateriasDisponibles_Result>("GetMateriasDisponibles");
        }
    
        public virtual ObjectResult<UspGenericItems_Result> UspGenericItems(string genericType)
        {
            var genericTypeParameter = genericType != null ?
                new ObjectParameter("GenericType", genericType) :
                new ObjectParameter("GenericType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGenericItems_Result>("UspGenericItems", genericTypeParameter);
        }
    
        public virtual int UspInsertaMateriasGrupoJuventud()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspInsertaMateriasGrupoJuventud");
        }
    
        public virtual ObjectResult<UspMunicipiosPorProvincia_Result> UspMunicipiosPorProvincia(Nullable<int> idProvincia)
        {
            var idProvinciaParameter = idProvincia.HasValue ?
                new ObjectParameter("IdProvincia", idProvincia) :
                new ObjectParameter("IdProvincia", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspMunicipiosPorProvincia_Result>("UspMunicipiosPorProvincia", idProvinciaParameter);
        }
    
        public virtual ObjectResult<UspProvinciasRD_Result> UspProvinciasRD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspProvinciasRD_Result>("UspProvinciasRD");
        }
    
        public virtual ObjectResult<UspGetDashboardITLAJVMateria_Result> UspGetDashboardITLAJVMateria()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetDashboardITLAJVMateria_Result>("UspGetDashboardITLAJVMateria");
        }
    
        public virtual ObjectResult<UspGetDashboardITLAJVProvincia_Result> UspGetDashboardITLAJVProvincia()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetDashboardITLAJVProvincia_Result>("UspGetDashboardITLAJVProvincia");
        }
    
        public virtual int GetNextSecuenceNumber(string secuenceKey, Nullable<bool> includeYear, Nullable<int> charCount, ObjectParameter number)
        {
            var secuenceKeyParameter = secuenceKey != null ?
                new ObjectParameter("SecuenceKey", secuenceKey) :
                new ObjectParameter("SecuenceKey", typeof(string));
    
            var includeYearParameter = includeYear.HasValue ?
                new ObjectParameter("IncludeYear", includeYear) :
                new ObjectParameter("IncludeYear", typeof(bool));
    
            var charCountParameter = charCount.HasValue ?
                new ObjectParameter("CharCount", charCount) :
                new ObjectParameter("CharCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNextSecuenceNumber", secuenceKeyParameter, includeYearParameter, charCountParameter, number);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<string> UspGetColumnHML(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UspGetColumnHML", tableNameParameter);
        }
    
        public virtual ObjectResult<UspGetLoginInfo_Result> UspGetLoginInfo(string nombreUsuario)
        {
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetLoginInfo_Result>("UspGetLoginInfo", nombreUsuarioParameter);
        }
    }
}
